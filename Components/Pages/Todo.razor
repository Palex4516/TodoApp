@page "/todo"
@using ToDoList.Services
@inject TodoService TodoService
@rendermode InteractiveServer

<h3>Todo List</h3>

<ul>
    @foreach (var todo in todoList)
    {
        <li>
            <input @bind="todo.Name" />
            <input type="checkbox" @bind="todo.IsComplete" />
            <button @onclick="() => UpdateTodo(todo)">Update</button>
            <button @onclick="() => RemoveTodo(todo.Id)">Remove</button>
        </li>
    }
    @if (todoList.Count == 0)
    {
        <h3>Inga todos hittades</h3>
    }
</ul>

<button @onclick="RefreshTodoList">Refresh</button>

<input @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>


@code {
    private List<TodoItem> todoList = [];
    string newTodo = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshTodoList();
    }

    async Task RefreshTodoList()
    {
        todoList = await TodoService.GetAllTodos();
        Console.WriteLine($"todoList.Count = {todoList.Count}");
    }

    async void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            TodoItem createdTodo = await TodoService.CreateTodo(newTodo);
            todoList.Add(createdTodo);
            newTodo = string.Empty;
            StateHasChanged();
        }
    }

    async void RemoveTodo(long id)
    {
        await TodoService.DeleteTodo(id);
        todoList.RemoveAll(todo => todo.Id == id);
        StateHasChanged();
    }

    async void UpdateTodo(TodoItem todoItem)
    {
        await TodoService.UpdateTodo(todoItem);
    }
}
